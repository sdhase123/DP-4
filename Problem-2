//TC:O(n*k), n:length of the array and k:maximum partition size.
//SC: O(n), for the DP array.
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) {
        int n = arr.length;
        int[] dp = new int[n + 1];

        for (int i = 1; i <= n; i++) {
            int maxVal = 0;

            for (int j = i - 1; j >= Math.max(0, i - k); j--) {
                maxVal = Math.max(maxVal, arr[j]);
                dp[i] = Math.max(dp[i], dp[j] + maxVal * (i - j));
            }
        }

        return dp[n];
    }
}
